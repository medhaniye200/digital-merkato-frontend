"use client";

import { useState, useEffect, useRef } from "react";

export default function MemberManager() {
  const [members, setMembers] = useState([]);
  const [form, setForm] = useState({
    full_name: "",
    position: "",
    role: "Member", // example roles: Member, Lead, Manager
    image: null,
  });
  const [preview, setPreview] = useState(null);
  const [editId, setEditId] = useState(null);
  const [token, setToken] = useState(null);
  const [toast, setToast] = useState(null);
  const [page, setPage] = useState(1);
  const pageSize = 5;
  const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL;

  const dragCounter = useRef(0);
  const [dragging, setDragging] = useState(false);

  // Toast helper
  const showToast = (message, type = "success") => {
    setToast({ message, type });
    setTimeout(() => setToast(null), 3000);
  };

  // Fetch members with pagination
  const fetchMembers = (pageNum = 1) => {
    const url = `${backendUrl}/api/staff-members/list?page=${pageNum}&page_size=${pageSize}`;
    fetch(url, {
      headers: { Authorization: `Bearer ${token}` },
    })
      .then((res) => {
        if (!res.ok) throw new Error("Failed to fetch members");
        return res.json();
      })
      .then((data) => {
        // Assuming API returns { results: [], count: number }
        setMembers(data.results || data);
      })
      .catch((err) => showToast(err.message, "error"));
  };

  useEffect(() => {
    const storedToken = localStorage.getItem("accessToken");
    setToken(storedToken);
  }, []);

  useEffect(() => {
    if (token) fetchMembers(page);
  }, [token, page]);

  const getImageUrl = (path) => {
    if (!path) return "";
    if (path.startsWith("http")) return path;
    return `${backendUrl}/media/${path.replace(/^\/?media\/?/, "")}`;
  };

  // Drag & Drop handlers
  const handleDragEnter = (e) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter.current++;
    setDragging(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter.current--;
    if (dragCounter.current === 0) setDragging(false);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragging(false);
    dragCounter.current = 0;
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      const file = e.dataTransfer.files[0];
      setForm((prev) => ({ ...prev, image: file }));
      setPreview(URL.createObjectURL(file));
      e.dataTransfer.clearData();
    }
  };

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    if (files && files[0]) {
      setForm((prev) => ({ ...prev, image: files[0] }));
      setPreview(URL.createObjectURL(files[0]));
    } else {
      setForm((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!token) return alert("You are not authenticated.");

    if (!form.full_name || !form.position) {
      showToast("Please fill in all required fields.", "error");
      return;
    }

    const formData = new FormData();
    formData.append("full_name", form.full_name);
    formData.append("position", form.position);
    formData.append("role", form.role);
    if (form.image) {
      formData.append("image_icon", form.image);
    }

    try {
      const res = await fetch(
        `${backendUrl}/api/staff-members/${editId ? `${editId}/` : ""}`,
        {
          method: editId ? "PUT" : "POST",
          headers: {
            Authorization: `Bearer ${token}`,
          },
          body: formData,
        }
      );

      if (!res.ok) throw new Error("Failed to save member");

      const updated = await res.json();
      if (editId) {
        setMembers((prev) =>
          prev.map((m) => (m.id === updated.id ? updated : m))
        );
        setEditId(null);
        showToast("Member updated successfully.");
      } else {
        setMembers((prev) => [updated, ...prev]);
        showToast("Member added successfully.");
      }

      setForm({ full_name: "", position: "", role: "Member", image: null });
      setPreview(null);
    } catch (err) {
      showToast(err.message, "error");
    }
  };

  const handleEdit = (member) => {
    setForm({
      full_name: member.full_name,
      position: member.position,
      role: member.role || "Member",
      image: null,
    });
    setPreview(getImageUrl(member.image_icon));
    setEditId(member.id);
  };

  const handleDelete = async (id) => {
    if (!token) return alert("You are not authenticated.");

    if (!window.confirm("Are you sure you want to delete this member?")) return;

    try {
      const res = await fetch(`${backendUrl}/api/staff-members/delete/${id}/`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!res.ok) throw new Error("Failed to delete member");

      setMembers((prev) => prev.filter((m) => m.id !== id));
      showToast("Member deleted successfully.");
    } catch (err) {
      showToast(err.message, "error");
    }
  };

  // Pagination controls
  const handleNextPage = () => setPage((p) => p + 1);
  const handlePrevPage = () => setPage((p) => Math.max(p - 1, 1));

  return (
    <div style={styles.container}>
      <h2 style={styles.header}>Manage Team Members</h2>

      {/* Toast */}
      {toast && (
        <div
          style={{
            ...styles.toast,
            backgroundColor: toast.type === "error" ? "#dc3545" : "#28a745",
          }}
          role="alert"
          aria-live="assertive"
        >
          {toast.message}
        </div>
      )}

      <form
        onSubmit={handleSubmit}
        style={styles.form}
        onDragEnter={handleDragEnter}
        onDragLeave={handleDragLeave}
        onDragOver={handleDragOver}
        onDrop={handleDrop}
      >
        <div style={styles.inputRow}>
          <div style={styles.inputGroup}>
            <label style={styles.label}>Full Name</label>
            <input
              name="full_name"
              value={form.full_name}
              onChange={handleChange}
              placeholder="Full name"
              style={styles.input}
              required
            />
          </div>
          <div style={styles.inputGroup}>
            <label style={styles.label}>Position</label>
            <input
              name="position"
              value={form.position}
              onChange={handleChange}
              placeholder="Position"
              style={styles.input}
              required
            />
          </div>
          <div style={styles.inputGroup}>
            <label style={styles.label}>Role</label>
            <select
              name="role"
              value={form.role}
              onChange={handleChange}
              style={{ ...styles.input, cursor: "pointer" }}
            >
              <option value="Member">Member</option>
              <option value="Lead">Lead</option>
              <option value="Manager">Manager</option>
            </select>
          </div>
          <div
            style={{
              ...styles.inputGroup,
              border: dragging
                ? "2px dashed var(--main-color)"
                : "2px dashed #ccc",
              borderRadius: 6,
              padding: 10,
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              justifyContent: "center",
              color: dragging ? "var(--main-color)" : "#666",
              cursor: "pointer",
              transition: "border-color 0.3s ease, color 0.3s ease",
              minHeight: 100,
            }}
            onClick={() => document.getElementById("imageInput").click()}
          >
            <input
              id="imageInput"
              type="file"
              name="image"
              accept="image/*"
              onChange={handleChange}
              style={{ display: "none" }}
            />
            {preview ? (
              <img
                src={preview}
                alt="Preview"
                style={{ maxHeight: 80, borderRadius: 8 }}
              />
            ) : (
              <span>Drag & Drop image here or click to select</span>
            )}
          </div>
        </div>

        <button type="submit" style={styles.button}>
          {editId ? "Update" : "Add"} Member
        </button>
      </form>

      {/* Members Table */}
      <table style={styles.table} aria-label="Team Members">
        <thead>
          <tr>
            <th style={styles.th}>Image</th>
            <th style={styles.th}>Name</th>
            <th style={styles.th}>Position</th>
            <th style={styles.th}>Role</th>
            <th style={styles.th}>Actions</th>
          </tr>
        </thead>
        <tbody>
          {members.map((m) => (
            <tr key={m.id} style={styles.tableRow}>
              <td style={styles.td}>
                <img
                  src={getImageUrl(m.image_icon)}
                  width="60"
                  alt={m.full_name}
                  style={{ borderRadius: "8px", transition: "transform 0.3s" }}
                  onMouseEnter={(e) => (e.currentTarget.style.transform = "scale(1.1)")}
                  onMouseLeave={(e) => (e.currentTarget.style.transform = "scale(1)")}
                />
              </td>
              <td style={styles.td}>{m.full_name}</td>
              <td style={styles.td}>{m.position}</td>
              <td style={styles.td}>
                <span style={{ ...styles.roleBadge, ...roleColors[m.role] }}>
                  {m.role || "Member"}
                </span>
              </td>
              <td style={styles.td}>
                <button onClick={() => handleEdit(m)} style={styles.editButton}>
                  Edit
                </button>
                <button
                  onClick={() => handleDelete(m.id)}
                  style={styles.deleteButton}
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Pagination */}
      <div style={styles.pagination}>
        <button
          onClick={handlePrevPage}
          style={{ ...styles.pageButton, opacity: page === 1 ? 0.5 : 1 }}
          disabled={page === 1}
          aria-label="Previous page"
        >
          &lt; Prev
        </button>
        <span style={{ margin: "0 1rem" }}>Page {page}</span>
        <button onClick={handleNextPage} style={styles.pageButton} aria-label="Next page">
          Next &gt;
        </button>
      </div>
    </div>
  );
}

const roleColors = {
  Member: { backgroundColor: "#3b82f6", color: "white" },
  Lead: { backgroundColor: "#f59e0b", color: "white" },
  Manager: { backgroundColor: "#10b981", color: "white" },
};

const styles = {
  container: {
    padding: "2rem",
    border: "1px solid #ccc",
    borderRadius: "12px",
    marginBottom: "3rem",
    fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
    backgroundColor: "white",
    boxShadow: "0 10px 30px rgb(0 0 0 / 0.1)",
  },
  header: {
    textAlign: "center",
    fontSize: "2rem",
    fontWeight: "700",
    marginBottom: "1.5rem",
    color: "#1e40af",
  },
  form: {
    marginBottom: "2rem",
    userSelect: "none",
  },
  inputRow: {
    display: "flex",
    gap: "1.5rem",
    flexWrap: "wrap",
    marginBottom: "1rem",
  },
  inputGroup: {
    display: "flex",
    flexDirection: "column",
    flex: 1,
  },
  label: {
    marginBottom: "0.5rem",
    fontWeight: "600",
    color: "#374151",
  },
  input: {
    padding: "0.6rem",
    border: "1px solid #ccc",
    borderRadius: "6px",
    fontSize: "1rem",
    transition: "border-color 0.3s ease",
  },
  button: {
    marginTop: "1rem",
    backgroundColor: "#3b82f6",
    color: "#fff",
    border: "none",
    padding: "0.8rem 2rem",
    borderRadius: "6px",
    fontWeight: "600",
    cursor: "pointer",
    boxShadow: "0 4px 8px rgb(59 130 246 / 0.4)",
    transition: "background-color 0.3s ease, box-shadow 0.3s ease",
  },
  table: {
    width: "100%",
    borderCollapse: "collapse",
    boxShadow: "0 5px 15px rgb(0 0 0 / 0.1)",
  },
  th: {
    textAlign: "left",
    padding: "0.75rem",
    backgroundColor: "#e0e7ff",
    fontWeight: "600",
    color: "#1e40af",
  },
  td: {
    padding: "0.75rem",
    borderBottom: "1px solid #ddd",
    verticalAlign: "middle",
  },
  tableRow: {
    transition: "background-color 0.25s ease",
    cursor: "default",
  },
  editButton: {
    marginRight: "0.5rem",
    backgroundColor: "#2563eb",
    color: "#fff",
    border: "none",
    padding: "0.4rem 1rem",
    borderRadius: "4px",
    cursor: "pointer",
    transition: "background-color 0.3s ease",
  },
  deleteButton: {
    backgroundColor: "#ef4444",
    color: "#fff",
    border: "none",
    padding: "0.4rem 1rem",
    borderRadius: "4px",
    cursor: "pointer",
    transition: "background-color 0.3s ease",
  },
  roleBadge: {
    padding: "0.3rem 0.7rem",
    borderRadius: "12px",
    fontWeight: "600",
    fontSize: "0.85rem",
    display: "inline-block",
  },
  pagination: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    marginTop: "1.5rem",
  },
  pageButton: {
    backgroundColor: "#3b82f6",
    color: "#fff",
    border: "none",
    padding: "0.5rem 1rem",
    borderRadius: "6px",
    fontWeight: "600",
    cursor: "pointer",
    boxShadow: "0 3px 7px rgb(59 130 246 / 0.5)",
    transition: "background-color 0.3s ease",
  },
  toast: {
    position: "fixed",
    top: "1rem",
    right: "1rem",
    padding: "1rem 1.5rem",
    borderRadius: "8px",
    color: "#fff",
    fontWeight: "600",
    boxShadow: "0 4px 10px rgba(0,0,0,0.25)",
    zIndex: 9999,
  },
};












